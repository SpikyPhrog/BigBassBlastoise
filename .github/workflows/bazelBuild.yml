name: CI
run-name: ${{ github.actor }} is building
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  BuildBazel:
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - uses: jwlawson/actions-setup-bazel@v2
        with:
          bazel-version: '7.5.0'
      - name: Checkout
        uses: actions/checkout@v4
      - uses: jwlawson/actions-setup-bazel@v2
        with:
          bazel-version: '7.5.0'
      - uses: actions/checkout@v4
      - run: bazel build //src --cxxopt='-std=c++17'
      - run: bazel build //src:package --cxxopt='-std=c++17'
      #- name: Build project # This would actually build your project, using zip for an example artifact
       # run: |
        #  zip --junk-paths test_release 
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./bazel-bin/src/package.zip
          asset_name: BBB.zip
          asset_content_type: application/zip
